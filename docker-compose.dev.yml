
services:
  traefik:
    image: traefik:v3.1
    command: --providers.docker --providers.file.directory=/etc/traefik/dynamic
    ports:
      - "80:80"    # only to redirect to 443
      - "443:443"  # HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/dev/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dev/dynamic:/etc/traefik/dynamic:ro
      - ./docker/traefik/dev:/etc/ssl/dev:ro
    networks: [web]
    labels:
      - traefik.enable=true
      # dashboard over HTTPS (no 8080 published)
      - traefik.http.routers.traefik.rule=Host(`traefik.localhost`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.service=api@internal

  static-perms:
    image: alpine:3.20
    user: "0:0"   # run as root
    command: sh -lc "mkdir -p /srv/static && chown -R ${UID:-1000}:${GID:-1000} /srv/static"
    volumes:
      - staticfiles_dev:/srv/static
    restart: "no"

  django:
    user: "${UID:-1000}:${GID:-1000}"   # keep your UID/GID if you added that
    build:
      context: ./django
    env_file: .env.dev
    volumes:
      - ./django/app:/app/app
      - ./.env.dev:/app/.env.dev:ro
      - staticfiles_dev:/app/app/staticfiles  # collectstatic target
    networks: [web, internal]
    expose:
      - "8000"
    depends_on:
      static-perms:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.docker.network=daytrading_platform_web
      - traefik.http.routers.django.rule=Host(`localhost`)
      - traefik.http.routers.django.entrypoints=websecure
      - traefik.http.routers.django.tls=true
      - traefik.http.routers.django.service=django-svc
      - traefik.http.services.django-svc.loadbalancer.server.port=8000

  postgres:
    image: postgres:16
    env_file: .env.dev
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:8
    env_file: .env.dev
    depends_on: [postgres]
    networks: [web, internal]
    volumes:
      - pgadmin_dev:/var/lib/pgadmin
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=80

  static:
    image: caddy:2-alpine
    volumes:
      - staticfiles_dev:/srv/static # same volume as Django's STATIC_ROOT
      - ./docker/static/Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - web
      - internal
    labels:
      - traefik.enable=true
      # Route only /static to Caddy
      - traefik.http.routers.static.rule=Host(`localhost`) && PathPrefix(`/static`)
      - traefik.http.routers.static.entrypoints=websecure
      - traefik.http.routers.static.tls=true
      - traefik.http.routers.static.priority=100
      - traefik.http.routers.static.middlewares=static-strip@docker          # ðŸ‘ˆ add
      - traefik.http.middlewares.static-strip.stripprefix.prefixes=/static
      - traefik.http.services.static.loadbalancer.server.port=80
      # IMPORTANT: use the same docker network Traefik uses for others
      - traefik.docker.network=daytrading_platform_web   # replace with your actual web network name


networks:
  web:
  internal:

volumes:
  pgdata_dev:
  pgadmin_dev:
  staticfiles_dev:
