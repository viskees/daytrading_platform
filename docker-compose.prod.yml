services:
  traefik:
    image: traefik:v3.1
    env_file: .env.prod
    command: --providers.docker --providers.file.directory=/etc/traefik/dynamic
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/prod/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/prod/dynamic:/etc/traefik/dynamic:ro
      - ./docker/traefik/acme:/acme
    networks: [web]
    labels:
      - traefik.enable=true

      # --- Hardened default headers (attach to routers) ---
      - traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.secure-headers.headers.browserXssFilter=true
      - traefik.http.middlewares.secure-headers.headers.referrerPolicy=strict-origin-when-cross-origin
      - traefik.http.middlewares.secure-headers.headers.customFrameOptionsValue=SAMEORIGIN

      # HSTS (only in PROD; don't do this on localhost)
      - traefik.http.middlewares.secure-headers.headers.forceSTSHeader=true
      - traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000
      - traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.secure-headers.headers.stsPreload=true

      # Lock down powerful APIs by default
      - "traefik.http.middlewares.secure-headers.headers.permissionsPolicy=camera=(), microphone=(), geolocation=(), payment=(), usb=()"

      # Optional: a relaxed CSP that won't break Django admin (tighten later)
      - "traefik.http.middlewares.csp-relaxed.headers.customResponseHeaders.Content-Security-Policy=default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; font-src 'self' data:; connect-src 'self'"

  static-perms:
    image: alpine:3.20
    env_file: .env.prod
    user: "0:0"
    command: sh -lc "mkdir -p /srv/static && chown -R ${UID:-1000}:${GID:-1000} /srv/static"
    volumes:
      - staticfiles:/srv/static
    networks: [web]
    restart: "no"

  django:
    user: "${UID:-1000}:${GID:-1000}"
    build:
      context: ./django
    env_file: .env.prod
    volumes:
      - ./.env.prod:/app/.env.prod:ro
      - staticfiles:/app/app/staticfiles
    networks: [web, internal]
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      static-perms:
        condition: service_completed_successfully
    labels:
      - traefik.enable=true
      - traefik.http.routers.django.rule=Host(`${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.django.entrypoints=websecure
      - traefik.http.routers.django.tls.certresolver=letsencrypt
      - traefik.http.routers.django.service=django-svc
      - traefik.http.services.django-svc.loadbalancer.server.port=8000
      - traefik.http.routers.django.middlewares=secure-headers@docker,csp-relaxed@docker

  static:
    image: caddy:2-alpine
    networks: [web]
    volumes:
      - staticfiles:/srv/static:ro
      - ./docker/static/prod/Caddyfile:/etc/caddy/Caddyfile:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.static.rule=Host(`${TRAEFIK_DOMAIN}`) && PathPrefix(`/static`)
      - traefik.http.routers.static.entrypoints=websecure
      - traefik.http.routers.static.tls.certresolver=letsencrypt
      - traefik.http.routers.static.priority=100
      - traefik.http.routers.static.middlewares=static-strip@docker
      - traefik.http.middlewares.static-strip.stripprefix.prefixes=/static
      - traefik.http.services.static.loadbalancer.server.port=80
      - traefik.http.routers.static.middlewares=secure-headers@docker

  postgres:
    image: postgres:16
    env_file: .env.prod
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    networks: [internal]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:8
    env_file: .env.prod
    depends_on: [postgres]
    networks: [web, internal]
    volumes:
      - pgadmin_prod:/var/lib/pgadmin
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls.certresolver=letsencrypt
      - traefik.http.services.pgadmin.loadbalancer.server.port=80

networks:
  web:
  internal:

volumes:
  pgdata_prod:
  pgadmin_prod:
  staticfiles:
