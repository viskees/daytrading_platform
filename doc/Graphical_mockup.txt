import React, { useEffect, useMemo, useRef, useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Upload, Plus, Trash2, TrendingUp, ShieldCheck, Calendar as CalendarIcon, Activity, NotebookPen, Settings, PlugZap, Save, Bug, Sun, Moon } from "lucide-react";

/**
 * ðŸ”§ FIX SUMMARY (build + runtime)
 * - Ensured theme types are strict: `getInitialTheme()` always returns a valid `Theme` ("light"|"dark").
 * - `useTheme()` now uses a lazy initializer `useState<Theme>(() => getInitialTheme())` to avoid SSR/window issues.
 * - Kept Select safety: never render <SelectItem value="">; disable Selects when empty.
 * - Fixed earlier reference bug by using `dollarsRisk` prop inside PositionSizer.
 * - Added/kept DevTests with more cases.
 */

// ---- Dev toggle ----
const SHOW_DEV_TESTS = false;

// ---- Theme ----
const THEME_KEY = "dtp.theme" as const;
type Theme = "light" | "dark";

function getInitialTheme(): Theme {
  // Default to DARK unless a saved choice exists.
  if (typeof window === "undefined") return "dark";
  const saved = window.localStorage.getItem(THEME_KEY);
  if (saved === "light" || saved === "dark") return saved;
  return "dark";
}

function useTheme() {
  const [theme, setTheme] = useState<Theme>(() => getInitialTheme());

  // Apply to <html>, <body>, data-theme, and persist
  useEffect(() => {
    if (typeof document === "undefined") return;
    const root = document.documentElement;
    const body = document.body;

    root.classList.toggle("dark", theme === "dark");
    body?.classList.toggle("dark", theme === "dark");

    root.setAttribute("data-theme", theme);
    body?.setAttribute("data-theme", theme);

    window.localStorage.setItem(THEME_KEY, theme);
  }, [theme]);

  // React to system changes only if no explicit saved choice
  useEffect(() => {
    const mq = window.matchMedia ? window.matchMedia("(prefers-color-scheme: dark)") : null;
    const onChange = (e: MediaQueryListEvent) => {
      const saved = window.localStorage.getItem(THEME_KEY);
      if (saved !== "light" && saved !== "dark") setTheme(e.matches ? "dark" : "light");
    };
    mq?.addEventListener?.("change", onChange);
    return () => mq?.removeEventListener?.("change", onChange);
  }, []);

  const toggle = () => setTheme((t) => (t === "dark" ? "light" : "dark"));
  return { theme, setTheme, toggle };
}

function ThemeToggleButton({ theme, onToggle }: { theme: Theme; onToggle: () => void }) {
  return (
    <Button type="button" variant="ghost" size="icon" aria-label="Toggle theme" aria-pressed={theme === "dark"} onClick={onToggle} className="rounded-2xl">
      {theme === "dark" ? <Sun className="w-5 h-5"/> : <Moon className="w-5 h-5"/>}
    </Button>
  );
}

// --- Helpers ---
const formatCurrency = (n: number) => new Intl.NumberFormat(undefined, { style: "currency", currency: "USD" }).format(n);
const todayISO = () => new Date().toISOString().slice(0,10);

// --- Types ---
interface WatchedTicker { symbol: string; notes?: string; }
interface Tick { t: number; price: number; volume?: number }
interface QuoteMap { [symbol: string]: Tick }
interface JournalEntry {
  id: string;
  date: string; // YYYY-MM-DD
  symbol: string;
  direction: "LONG" | "SHORT";
  size: number; // shares
  entryPrice: number;
  exitPrice?: number; // if closed
  open: boolean;
  tags: string[];
  notes?: string;
  images: string[]; // data URLs
}
interface RiskPolicy {
  accountEquity: number; // current equity
  dayStartEquity: number; // equity at market open
  maxRiskPerTradePct: number; // e.g. 2
  maxDailyLossPct: number; // e.g. 4
  maxTradesPerDay: number;  // e.g. 6
  lockoutEnabled: boolean;
}

// --- LocalStorage keys (simple persistence until backend wiring) ---
const LS_KEYS = {
  tickers: "dtp.tickers",
  journal: "dtp.journal",
  risk: "dtp.risk",
};

// --- Pure utils (also used by DevTests) ---
function computeDailySummary(entries: JournalEntry[]) {
  const map: Record<string, { realized: number; trades: number }> = {};
  for (const j of entries) {
    if (!map[j.date]) map[j.date] = { realized: 0, trades: 0 };
    map[j.date].trades += 1;
    if (!j.open && typeof j.exitPrice === "number") {
      const r = (j.exitPrice - j.entryPrice) * (j.direction === "LONG" ? 1 : -1) * j.size;
      map[j.date].realized += r;
    }
  }
  return map;
}
function positionSize(dollarsRisk: number, entry?: number, stop?: number) {
  if (entry == null || stop == null) return 0;
  const perShare = Math.max(0, entry - stop);
  return perShare > 0 ? Math.floor(dollarsRisk / perShare) : 0;
}
function shouldLockout(todaysRealized: number, maxDailyLoss: number, enabled: boolean) {
  return enabled && (-todaysRealized) >= maxDailyLoss;
}

// --- Mock websocket util (replace with real URL) ---
function usePrices(symbols: string[]) {
  const [quotes, setQuotes] = useState<QuoteMap>({});
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    if (!symbols.length) return;

    // Close previous
    if (wsRef.current) { wsRef.current.close(); }

    // Placeholder echo server simulation (replace with real market data WS)
    // const WS_URL = "wss://YOUR_PRICE_FEED/ws";
    // wsRef.current = new WebSocket(WS_URL);
    // wsRef.current.onopen = () => wsRef.current?.send(JSON.stringify({ type: "subscribe", symbols }));
    // wsRef.current.onmessage = (ev) => { const msg = JSON.parse(ev.data); /* map into setQuotes */ };

    // Demo timer to simulate ticks locally
    let alive = true;
    const base: QuoteMap = Object.fromEntries(symbols.map((s) => [s, { t: Date.now(), price: +(Math.random()*60 + 20).toFixed(2), volume: Math.floor(Math.random()*1_000_000) }]));
    setQuotes(base);

    const id = setInterval(() => {
      if (!alive) return;
      setQuotes((prev) => {
        const next: QuoteMap = { ...prev };
        for (const s of symbols) {
          const p = (prev[s]?.price ?? base[s].price) * (1 + (Math.random() - 0.5) * 0.002);
          next[s] = { t: Date.now(), price: +p.toFixed(3), volume: Math.floor((prev[s]?.volume ?? base[s].volume ?? 0) + Math.random()*5000) };
        }
        return next;
      });
    }, 1500);

    return () => { alive = false; clearInterval(id); if (wsRef.current) wsRef.current.close(); };
  }, [symbols.join(",")]);

  return quotes;
}

// --- Main UI ---
export default function TradingJournalApp() {
  // THEME
  const { theme, toggle } = useTheme();

  // Watched tickers
  const [newSymbol, setNewSymbol] = useState("");
  const [tickers, setTickers] = useState<WatchedTicker[]>(() => {
    try { return JSON.parse(localStorage.getItem(LS_KEYS.tickers) || "[]"); } catch { return []; }
  });
  useEffect(() => localStorage.setItem(LS_KEYS.tickers, JSON.stringify(tickers)), [tickers]);
  const quotes = usePrices(tickers.map(t => t.symbol));

  // Journal
  const [journal, setJournal] = useState<JournalEntry[]>(() => {
    try { return JSON.parse(localStorage.getItem(LS_KEYS.journal) || "[]"); } catch { return []; }
  });
  useEffect(() => localStorage.setItem(LS_KEYS.journal, JSON.stringify(journal)), [journal]);

  // Risk policy
  const [risk, setRisk] = useState<RiskPolicy>(() => {
    try {
      return JSON.parse(localStorage.getItem(LS_KEYS.risk) || "null") || {
        accountEquity: 25_000,
        dayStartEquity: 25_000,
        maxRiskPerTradePct: 2,
        maxDailyLossPct: 4,
        maxTradesPerDay: 6,
        lockoutEnabled: true,
      } as RiskPolicy;
    } catch {
      return { accountEquity: 25_000, dayStartEquity: 25_000, maxRiskPerTradePct: 2, maxDailyLossPct: 4, maxTradesPerDay: 6, lockoutEnabled: true };
    }
  });
  useEffect(() => localStorage.setItem(LS_KEYS.risk, JSON.stringify(risk)), [risk]);

  // Derived risk numbers
  const dollarsPerTrade = useMemo(() => risk.accountEquity * (risk.maxRiskPerTradePct/100), [risk]);
  const maxDailyLoss = useMemo(() => risk.dayStartEquity * (risk.maxDailyLossPct/100), [risk]);

  // Simple day rollup (for Calendar Dashboard)
  const dailySummary = useMemo(() => computeDailySummary(journal), [journal]);

  // Lockout logic example (frontend only; enforce on backend later)
  const todays = useMemo(() => journal.filter(j => j.date === todayISO()), [journal]);
  const todaysRealized = useMemo(() => todays.filter(j => !j.open && typeof j.exitPrice === "number").reduce((s,j)=> s + (j.exitPrice! - j.entryPrice) * (j.direction === "LONG" ? 1 : -1) * j.size, 0), [todays]);
  const lockout = shouldLockout(todaysRealized, maxDailyLoss, risk.lockoutEnabled);

  // --- Actions ---
  const addSymbol = () => {
    const s = newSymbol.trim().toUpperCase();
    if (!s) return;
    if (tickers.some(t => t.symbol === s)) return;
    setTickers(prev => [...prev, { symbol: s }]);
    setNewSymbol("");
  };
  const removeSymbol = (s: string) => setTickers(prev => prev.filter(t => t.symbol !== s));

  const addJournal = (entry: Omit<JournalEntry, "id">) => {
    if (lockout) return alert("Daily loss lockout active. New trades disabled.");
    setJournal(prev => [{ id: crypto.randomUUID(), ...entry }, ...prev]);
  };
  const closeTrade = (id: string, exitPrice: number) => setJournal(prev => prev.map(j => j.id === id ? { ...j, open: false, exitPrice } : j));
  const deleteEntry = (id: string) => setJournal(prev => prev.filter(j => j.id !== id));

  const saveRisk = () => {
    // In a real app, call your API; here it's persisted via localStorage by useEffect.
  };

  // --- Subcomponents ---
  const StocksTab = (
    <div className="grid grid-cols-1 xl:grid-cols-3 gap-4">
      <Card className="xl:col-span-1 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><PlugZap className="w-5 h-5"/> Watchlist</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="flex gap-2">
            <Input placeholder="Add symbol (e.g., AAPL)" value={newSymbol} onChange={e=>setNewSymbol(e.target.value)} onKeyDown={e => e.key==='Enter' && addSymbol()} />
            <Button onClick={addSymbol} className="shrink-0"><Plus className="w-4 h-4 mr-1"/>Add</Button>
          </div>
          <div className="space-y-2 max-h-[50vh] overflow-auto pr-1">
            {tickers.length === 0 && (
              <div className="text-sm text-muted-foreground">No symbols yet. Add one to start streaming prices.</div>
            )}
            {tickers.map((t) => (
              <div key={t.symbol} className="flex items-center justify-between rounded-2xl border p-3">
                <div>
                  <div className="font-semibold tracking-wide">{t.symbol}</div>
                  <div className="text-xs text-muted-foreground">{new Date(quotes[t.symbol]?.t || Date.now()).toLocaleTimeString()} â€¢ Vol {quotes[t.symbol]?.volume?.toLocaleString?.() || "â€”"}</div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="text-right">
                    <div className="text-lg font-bold tabular-nums">{quotes[t.symbol]?.price?.toFixed?.(3) ?? "â€”"}</div>
                    <div className="text-xs text-muted-foreground">last</div>
                  </div>
                  <Button variant="ghost" size="icon" onClick={() => removeSymbol(t.symbol)}><Trash2 className="w-4 h-4"/></Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card className="xl:col-span-2 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><TrendingUp className="w-5 h-5"/> Realtime Ticker Tape</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-3">
            {Object.keys(quotes).length === 0 && (
              <div className="text-sm text-muted-foreground">Add tickers to see realtime updates.</div>
            )}
            {Object.entries(quotes).map(([sym, q]) => (
              <div key={sym} className="rounded-2xl border p-3 flex items-center justify-between">
                <div className="font-semibold">{sym}</div>
                <div className="text-right">
                  <div className="text-lg font-bold tabular-nums">{q.price.toFixed(3)}</div>
                  <div className="text-[11px] text-muted-foreground">{new Date(q.t).toLocaleTimeString()}</div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const CalendarTab = (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
      <Card className="lg:col-span-2 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><CalendarIcon className="w-5 h-5"/> Calendar (Monthly)</CardTitle>
        </CardHeader>
        <CardContent>
          <MonthlyCalendar realizedMap={dailySummary} />
        </CardContent>
      </Card>
      <Card className="shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><Activity className="w-5 h-5"/> Day Summary</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          <div className="flex items-center justify-between"><span className="text-muted-foreground text-sm">Date</span><span>{todayISO()}</span></div>
          <div className={`flex items-center justify-between ${todaysRealized>=0?"text-emerald-600":"text-rose-600"}`}>
            <span className="text-muted-foreground text-sm">Realized P&L</span>
            <span className="font-semibold">{formatCurrency(todaysRealized)}</span>
          </div>
          <div className="flex items-center justify-between"><span className="text-muted-foreground text-sm">Trades</span><span className="font-medium">{todays.length}</span></div>
          <div className="flex items-center justify-between"><span className="text-muted-foreground text-sm">Lockout</span><span className="font-medium">{lockout? "ON" : "OFF"}</span></div>
        </CardContent>
      </Card>
    </div>
  );

  const JournalTab = (
    <div className="grid grid-cols-1 xl:grid-cols-3 gap-4">
      {/* Open Trades */}
      <Card className="shadow-sm xl:col-span-1">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><NotebookPen className="w-5 h-5"/> New / Open Trade</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <NewTradeForm
            symbols={tickers.map(t=>t.symbol)}
            onSubmit={(payload) => addJournal({ ...payload, open: true })}
            disabled={lockout}
          />
          {lockout && (
            <div className="text-xs text-rose-600">Daily loss lockout is active. Disable in Risk tab if needed (not recommended).</div>
          )}

          <div className="mt-4 space-y-2">
            <h3 className="text-sm font-semibold">Currently Open</h3>
            {journal.filter(j=>j.open).length===0 && <div className="text-sm text-muted-foreground">No open trades.</div>}
            {journal.filter(j=>j.open).map(j => (
              <div key={j.id} className="border rounded-2xl p-3">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-semibold">{j.symbol} â€¢ {j.direction}</div>
                    <div className="text-xs text-muted-foreground">{j.size} @ {j.entryPrice}</div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Input type="number" className="w-28" placeholder="Exit price" onKeyDown={(e:any)=>{
                      if(e.key==='Enter') { const v = parseFloat(e.currentTarget.value); if(!isNaN(v)) closeTrade(j.id, v); e.currentTarget.value=''; }
                    }} />
                    <Button variant="secondary" onClick={()=>{
                      const v = prompt("Exit price?"); if(!v) return; const n = parseFloat(v); if(!isNaN(n)) closeTrade(j.id, n);
                    }}>Close</Button>
                  </div>
                </div>
                {j.images?.length>0 && (
                  <div className="mt-2 grid grid-cols-3 gap-2">
                    {j.images.map((src,idx)=>(<img key={idx} src={src} className="rounded-xl object-cover aspect-video"/>))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Closed / Past */}
      <Card className="shadow-sm xl:col-span-2">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><NotebookPen className="w-5 h-5"/> Closed & Past Trades</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid md:grid-cols-2 gap-3">
            {journal.filter(j=>!j.open).length===0 && <div className="text-sm text-muted-foreground">No closed trades yet.</div>}
            {journal.filter(j=>!j.open).map(j => (
              <div key={j.id} className="border rounded-2xl p-3">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-semibold">{j.date} â€¢ {j.symbol} â€¢ {j.direction}</div>
                    <div className="text-xs text-muted-foreground">{j.size} @ {j.entryPrice} â†’ {j.exitPrice}</div>
                    <div className={`text-sm font-medium ${(((j.exitPrice??0)-j.entryPrice)*(j.direction==='LONG'?1:-1)*j.size) >= 0 ? 'text-emerald-600' : 'text-rose-600'}`}>
                      P&L: {formatCurrency(((j.exitPrice??0)-j.entryPrice)*(j.direction==='LONG'?1:-1)*j.size)}
                    </div>
                  </div>
                  <Button variant="ghost" size="icon" onClick={()=>deleteEntry(j.id)}><Trash2 className="w-4 h-4"/></Button>
                </div>
                {j.tags?.length>0 && (
                  <div className="mt-2 text-xs text-muted-foreground">Tags: {j.tags.join(", ")}</div>
                )}
                {j.notes && <div className="mt-2 text-sm">{j.notes}</div>}
                {j.images?.length>0 && (
                  <div className="mt-3 grid grid-cols-3 gap-2">
                    {j.images.map((src,idx)=>(<img key={idx} src={src} className="rounded-xl object-cover aspect-video"/>))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const RiskTab = (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
      <Card className="lg:col-span-2 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><ShieldCheck className="w-5 h-5"/> Risk Management</CardTitle>
        </CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-4">
          <div className="space-y-3">
            <div>
              <Label>Account Equity</Label>
              <Input type="number" value={risk.accountEquity} onChange={e=>setRisk({...risk, accountEquity: +e.target.value})} />
            </div>
            <div>
              <Label>Day-Start Equity</Label>
              <Input type="number" value={risk.dayStartEquity} onChange={e=>setRisk({...risk, dayStartEquity: +e.target.value})} />
            </div>
            <div>
              <Label>Max Risk per Trade (%)</Label>
              <Input type="number" step="0.1" value={risk.maxRiskPerTradePct} onChange={e=>setRisk({...risk, maxRiskPerTradePct: +e.target.value})} />
            </div>
            <div>
              <Label>Max Daily Loss (%)</Label>
              <Input type="number" step="0.1" value={risk.maxDailyLossPct} onChange={e=>setRisk({...risk, maxDailyLossPct: +e.target.value})} />
            </div>
            <div>
              <Label>Max Trades per Day</Label>
              <Input type="number" value={risk.maxTradesPerDay} onChange={e=>setRisk({...risk, maxTradesPerDay: +e.target.value})} />
            </div>
            <div className="flex items-center justify-between rounded-2xl border p-3">
              <div>
                <div className="font-medium">Daily Loss Lockout</div>
                <div className="text-xs text-muted-foreground">Disable new trades when realized loss exceeds threshold</div>
              </div>
              <Switch checked={risk.lockoutEnabled} onCheckedChange={(v)=>setRisk({...risk, lockoutEnabled: v})} />
            </div>
            <div className="pt-1">
              <Button onClick={saveRisk}><Save className="w-4 h-4 mr-2"/>Save Policy</Button>
            </div>
          </div>

          <div className="space-y-3">
            <div className="rounded-2xl border p-4">
              <div className="text-sm text-muted-foreground">Guidance</div>
              <div className="mt-2 grid grid-cols-2 gap-2 text-sm">
                <div className="rounded-xl border p-3">
                  <div className="text-xs text-muted-foreground">Risk per trade</div>
                  <div className="text-lg font-semibold tabular-nums">{formatCurrency(dollarsPerTrade)}</div>
                </div>
                <div className="rounded-xl border p-3">
                  <div className="text-xs text-muted-foreground">Max daily loss</div>
                  <div className="text-lg font-semibold tabular-nums">{formatCurrency(maxDailyLoss)}</div>
                </div>
                <div className={`rounded-xl border p-3 ${lockout? 'bg-rose-50 dark:bg-rose-950/20':''}`}>
                  <div className="text-xs text-muted-foreground">Lockout status (today)</div>
                  <div className="text-lg font-semibold">{lockout? 'LOCKED' : 'UNLOCKED'}</div>
                </div>
                <div className="rounded-xl border p-3">
                  <div className="text-xs text-muted-foreground">Today realized P&L</div>
                  <div className={`text-lg font-semibold tabular-nums ${todaysRealized>=0?"text-emerald-600":"text-rose-600"}`}>{formatCurrency(todaysRealized)}</div>
                </div>
              </div>
            </div>

            <div className="rounded-2xl border p-4">
              <div className="text-sm font-semibold mb-2">Position Sizing Helper</div>
              <PositionSizer dollarsRisk={dollarsPerTrade} quotes={quotes} />
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><Settings className="w-5 h-5"/> Preferences</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <Label>Default Direction</Label>
            <Select defaultValue="LONG">
              <SelectTrigger className="mt-1"><SelectValue placeholder="Select"/></SelectTrigger>
              <SelectContent>
                <SelectItem value="LONG">LONG</SelectItem>
                <SelectItem value="SHORT">SHORT</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label>Default Size (shares)</Label>
            <Input type="number" placeholder="e.g., 100" />
          </div>
          <div className="text-xs text-muted-foreground">All data is managed via this UI; no /admin usage is required.</div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <div className={theme === "dark" ? "dark" : ""}>
      <div className="min-h-screen bg-background text-foreground p-4 md:p-6">
        {/* Top Nav */}
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="w-9 h-9 rounded-2xl bg-primary/10 grid place-items-center font-bold">TJ</div>
            <div>
              <div className="font-semibold leading-tight">Trading Journal</div>
              <div className="text-xs text-muted-foreground">Smooth React + Tailwind UI</div>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <ThemeToggleButton theme={theme} onToggle={toggle} />
            <Button variant="secondary" size="sm">Login</Button>
          </div>
        </div>

        <Tabs defaultValue="stocks" className="">
          <TabsList className="grid grid-cols-4 rounded-2xl">
            <TabsTrigger value="stocks" className="flex items-center gap-2"><TrendingUp className="w-4 h-4"/> Stocks</TabsTrigger>
            <TabsTrigger value="calendar" className="flex items-center gap-2"><CalendarIcon className="w-4 h-4"/> Dashboard</TabsTrigger>
            <TabsTrigger value="journal" className="flex items-center gap-2"><NotebookPen className="w-4 h-4"/> Journal</TabsTrigger>
            <TabsTrigger value="risk" className="flex items-center gap-2"><ShieldCheck className="w-4 h-4"/> Risk</TabsTrigger>
          </TabsList>

          <div className="mt-4 space-y-6">
            <TabsContent value="stocks">{StocksTab}</TabsContent>
            <TabsContent value="calendar">{CalendarTab}</TabsContent>
            <TabsContent value="journal">{JournalTab}</TabsContent>
            <TabsContent value="risk">{RiskTab}</TabsContent>
          </div>
        </Tabs>

        {SHOW_DEV_TESTS && <DevTests />}

        <footer className="mt-8 text-xs text-muted-foreground text-center">Â© {new Date().getFullYear()} Your Project â€¢ All data managed via GUI</footer>
      </div>
    </div>
  );
}

// --- Monthly Calendar (simple inline implementation) ---
function MonthlyCalendar({ realizedMap }: { realizedMap: Record<string, { realized: number; trades: number }> }) {
  const d = new Date();
  const first = new Date(d.getFullYear(), d.getMonth(), 1);
  const last = new Date(d.getFullYear(), d.getMonth()+1, 0);
  const startIdx = (first.getDay() + 6) % 7; // Monday=0
  const days = last.getDate();

  const cells = Array.from({ length: startIdx + days }, (_ , i) => {
    const day = i - startIdx + 1;
    const valid = day >= 1 && day <= days;
    const iso = valid ? new Date(d.getFullYear(), d.getMonth(), day).toISOString().slice(0,10) : "";
    const item = valid ? realizedMap[iso] : undefined;
    return { valid, day, iso, item };
  });

  return (
    <div className="rounded-2xl border overflow-hidden">
      <div className="grid grid-cols-7 bg-muted/50 text-xs">
        {["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map((w) => (
          <div key={w} className="p-2 text-center font-medium">{w}</div>
        ))}
      </div>
      <div className="grid grid-cols-7">
        {cells.map((c, idx) => (
          <div key={idx} className={`min-h-[90px] border-t p-2 ${c.valid?"bg-background":"bg-muted/20"}`}>
            {c.valid && (
              <div>
                <div className="text-xs text-muted-foreground">{c.day}</div>
                {c.item ? (
                  <div className={`mt-1 text-sm font-medium ${c.item.realized>=0?"text-emerald-600":"text-rose-600"}`}>
                    {c.item.realized>=0?"+":""}{Math.round(c.item.realized)} â€¢ {c.item.trades} tr
                  </div>
                ) : (
                  <div className="mt-1 text-xs text-muted-foreground">â€”</div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

// --- New Trade Form ---
function NewTradeForm({ symbols, onSubmit, disabled }:{ symbols: string[]; onSubmit: (entry: Omit<JournalEntry, "id"|"open">) => void; disabled?: boolean }){
  const hasSymbols = symbols.length > 0;
  const [symbol, setSymbol] = useState(hasSymbols ? symbols[0] : "");
  const [direction, setDirection] = useState<"LONG"|"SHORT">("LONG");
  const [size, setSize] = useState(100);
  const [entry, setEntry] = useState<number | "">("");
  const [tags, setTags] = useState<string>("");
  const [notes, setNotes] = useState("");
  const [images, setImages] = useState<string[]>([]);

  // When symbols list changes, pick the first symbol if current one isn't available
  useEffect(()=>{
    if (!symbols.includes(symbol)) {
      setSymbol(symbols[0] ?? "");
    }
  }, [symbols.join(",")]);

  const handleUpload = async (files: FileList | null) => {
    if (!files) return;
    const arr: string[] = [];
    for (const f of Array.from(files)) {
      const data = await f.arrayBuffer();
      const base64 = btoa(String.fromCharCode(...new Uint8Array(data)));
      arr.push(`data:${f.type};base64,${base64}`);
    }
    setImages(prev => [...prev, ...arr]);
  };

  const canSubmit = !!symbol && !!size && entry !== "";

  const submit = () => {
    if (!canSubmit) return;
    onSubmit({ date: todayISO(), symbol, direction, size, entryPrice: Number(entry), tags: tags.split(",").map(s=>s.trim()).filter(Boolean), notes, images });
    setNotes(""); setImages([]); setTags(""); setEntry("");
  };

  return (
    <div className="space-y-3">
      <div className="grid grid-cols-2 gap-2">
        <div>
          <Label>Symbol</Label>
          <Select value={symbol} onValueChange={setSymbol} disabled={!hasSymbols}>
            <SelectTrigger className="mt-1"><SelectValue placeholder="Add a symbol in Stocks"/></SelectTrigger>
            <SelectContent>
              {symbols.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
            </SelectContent>
          </Select>
          {!hasSymbols && <div className="text-[11px] text-muted-foreground mt-1">No symbols yet. Add one in the Stocks tab.</div>}
        </div>
        <div>
          <Label>Direction</Label>
          <Select value={direction} onValueChange={(v)=>setDirection(v as any)}>
            <SelectTrigger className="mt-1"><SelectValue/></SelectTrigger>
            <SelectContent>
              <SelectItem value="LONG">LONG</SelectItem>
              <SelectItem value="SHORT">SHORT</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label>Size (shares)</Label>
          <Input type="number" value={size} onChange={e=>setSize(+e.target.value)} />
        </div>
        <div>
          <Label>Entry price</Label>
          <Input type="number" value={entry} onChange={e=>setEntry(e.target.value === '' ? '' : +e.target.value)} />
        </div>
        <div className="col-span-2">
          <Label>Tags (comma separated)</Label>
          <Input placeholder="e.g., momentum, vwap, breakout" value={tags} onChange={e=>setTags(e.target.value)} />
        </div>
        <div className="col-span-2">
          <Label>Notes</Label>
          <Textarea placeholder="Whatâ€™s the setup?" value={notes} onChange={e=>setNotes(e.target.value)} />
        </div>
        <div className="col-span-2">
          <Label className="flex items-center gap-2"><Upload className="w-4 h-4"/> Upload screenshots</Label>
          <Input type="file" accept="image/*" multiple onChange={(e)=>handleUpload(e.target.files)} />
          {images.length>0 && (
            <div className="mt-2 grid grid-cols-3 gap-2">
              {images.map((src, idx)=> (<img key={idx} src={src} className="rounded-xl object-cover aspect-video"/>))}
            </div>
          )}
        </div>
      </div>
      <div className="flex justify-end">
        <Button disabled={disabled || !canSubmit} onClick={submit}>{disabled? 'Locked' : 'Add Open Trade'}</Button>
      </div>
    </div>
  );
}

// --- Position Sizer ---
function PositionSizer({ dollarsRisk, quotes }:{ dollarsRisk: number; quotes: QuoteMap }){
  const symbols = Object.keys(quotes);
  const hasQuotes = symbols.length > 0;
  const [symbol, setSymbol] = useState<string>(hasQuotes ? symbols[0] : "");
  const [entry, setEntry] = useState<number | "">("");
  const [stop, setStop] = useState<number | "">("");

  useEffect(()=>{ if (!symbols.includes(symbol)) setSymbol(symbols[0] ?? ""); }, [symbols.join(",")]);

  const perShareRisk = useMemo(() => (entry !== "" && stop !== "") ? Math.max(0, Number(entry) - Number(stop)) : 0, [entry, stop]);
  const shares = useMemo(() => positionSize(dollarsRisk, entry === "" ? undefined : Number(entry), stop === "" ? undefined : Number(stop)), [perShareRisk, dollarsRisk, entry, stop]);

  return (
    <div className="space-y-3">
      <div className="grid grid-cols-2 gap-2">
        <div>
          <Label>Symbol</Label>
          <Select value={symbol} onValueChange={setSymbol} disabled={!hasQuotes}>
            <SelectTrigger className="mt-1"><SelectValue placeholder="Add symbols to see quotes"/></SelectTrigger>
            <SelectContent>
              {symbols.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
            </SelectContent>
          </Select>
          {!hasQuotes && <div className="text-[11px] text-muted-foreground mt-1">No quotes available yet.</div>}
        </div>
        <div>
          <Label>Live Price</Label>
          <div className="mt-2 text-lg font-semibold tabular-nums">{symbol? quotes[symbol]?.price?.toFixed(3) ?? 'â€”' : 'â€”'}</div>
        </div>
        <div>
          <Label>Entry</Label>
          <Input type="number" value={entry} onChange={e=>setEntry(e.target.value===''? '' : +e.target.value)} />
        </div>
        <div>
          <Label>Stop</Label>
          <Input type="number" value={stop} onChange={e=>setStop(e.target.value===''? '' : +e.target.value)} />
        </div>
      </div>
      <div className="grid grid-cols-2 gap-2">
        <div className="rounded-2xl border p-3">
          <div className="text-xs text-muted-foreground">Risk budget</div>
          <div className="text-lg font-semibold tabular-nums">{formatCurrency(dollarsRisk)}</div>
        </div>
        <div className="rounded-2xl border p-3">
          <div className="text-xs text-muted-foreground">Per-share risk</div>
          <div className="text-lg font-semibold tabular-nums">{perShareRisk.toFixed(2)}</div>
        </div>
        <div className="rounded-2xl border p-3 col-span-2">
          <div className="text-xs text-muted-foreground">Suggested position size</div>
          <div className="text-2xl font-bold tabular-nums">{shares} shares</div>
        </div>
      </div>
    </div>
  );
}

// --- Dev Tests (render only when SHOW_DEV_TESTS=true) ---
function DevTests() {
  // Test 1: position sizing
  const sizeA = positionSize(500, 10, 9); // $1 risk â†’ 500 shares
  const sizeB = positionSize(400, 20, 19.5); // $0.5 risk â†’ 800 shares
  const sizeZero = positionSize(500, 10, 10); // 0 risk â†’ 0 shares
  const sizeNeg = positionSize(500, 9, 10); // negative risk â†’ 0 shares

  // Test 2: daily summary
  const sample: JournalEntry[] = [
    { id: "1", date: "2025-01-01", symbol: "AAA", direction: "LONG", size: 100, entryPrice: 10, exitPrice: 11, open: false, tags: [], images: [] },
    { id: "2", date: "2025-01-01", symbol: "BBB", direction: "SHORT", size: 50, entryPrice: 20, exitPrice: 22, open: false, tags: [], images: [] },
    { id: "3", date: "2025-01-02", symbol: "CCC", direction: "LONG", size: 10, entryPrice: 5, open: true, tags: [], images: [] },
  ];
  const sum = computeDailySummary(sample);
  const jan1 = sum["2025-01-01"]; // (11-10)*100 + (22-20)*(-1)*50 = 100 - 100 = 0
  const jan2 = sum["2025-01-02"]; // open â†’ 0 realized

  // Test 3: lockout
  const lockTrue = shouldLockout(-100, 50, true) === true;
  const lockFalse = shouldLockout(-30, 50, true) === false;
  const lockDisabled = shouldLockout(-100, 50, false) === false; // disabled must never lock

  // Expectations
  const tests = [
    { name: "positionSize basic A", pass: sizeA === 500, detail: `got ${sizeA}` },
    { name: "positionSize basic B", pass: sizeB === 800, detail: `got ${sizeB}` },
    { name: "positionSize zero risk", pass: sizeZero === 0, detail: `got ${sizeZero}` },
    { name: "positionSize negative risk", pass: sizeNeg === 0, detail: `got ${sizeNeg}` },
    { name: "dailySummary Jan 1 realized", pass: jan1?.realized === 0, detail: `got ${jan1?.realized}` },
    { name: "dailySummary Jan 1 trades", pass: jan1?.trades === 2, detail: `got ${jan1?.trades}` },
    { name: "dailySummary Jan 2 realized", pass: (jan2?.realized ?? 0) === 0, detail: `got ${jan2?.realized}` },
    { name: "lockout true when loss exceeds", pass: lockTrue, detail: "expected true" },
    { name: "lockout false when below threshold", pass: lockFalse, detail: "expected false" },
    { name: "lockout disabled ignores loss", pass: lockDisabled, detail: "expected false" },
  ];

  const allPass = tests.every(t => t.pass);

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-lg"><Bug className="w-5 h-5"/> Dev Tests</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-sm mb-3">Self-checks to guard against regressions (toggle via SHOW_DEV_TESTS).</div>
        <ul className="space-y-2">
          {tests.map((t, i) => (
            <li key={i} className={`flex items-center justify-between rounded-xl border p-2 ${t.pass? 'bg-emerald-50 dark:bg-emerald-950/10' : 'bg-rose-50 dark:bg-rose-950/10'}`}>
              <span>{t.name}</span>
              <span className={`text-xs font-medium ${t.pass? 'text-emerald-700' : 'text-rose-700'}`}>{t.pass? 'PASS' : 'FAIL'} â€” {t.detail}</span>
            </li>
          ))}
        </ul>
        <div className={`mt-3 text-sm font-medium ${allPass? 'text-emerald-700' : 'text-rose-700'}`}>Overall: {allPass? 'ALL PASS' : 'HAS FAILURES'}</div>
      </CardContent>
    </Card>
  );
}
